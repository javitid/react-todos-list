{"version":3,"sources":["components/TodoItems.jsx","components/TodoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TodoItems","todo","toggleTodo","id","task","completed","type","checked","onChange","TodoList","todos","map","KEY","App","useState","setTodos","todoTaskRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","placeholder","onClick","current","value","prevTodos","slice","filter","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEO,SAASA,EAAT,GAA0C,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACvBC,EAAuBF,EAAvBE,GAAIC,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,UAKjB,OACI,+BACI,uBAAOC,KAAK,WAAWC,QAASF,EAAWG,SAN3B,WACpBN,EAAWC,MAMNC,KCRN,SAASK,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WAC9B,OACI,6BACKQ,EAAMC,KAAI,SAACV,GAAD,OACP,cAACD,EAAD,CAAyBC,KAAMA,EAAMC,WAAYA,GAAjCD,EAAKE,SCHrC,IAAMS,EAAM,gBAEL,SAASC,IACd,MAA0BC,mBAAS,CACjC,CAACX,GAAI,EAAGC,KAAM,SAAUC,WAAW,GACnC,CAACF,GAAI,EAAGC,KAAM,SAAUC,WAAW,GACnC,CAACF,GAAI,EAAGC,KAAM,SAAUC,WAAW,KAHrC,mBAAOK,EAAP,KAAcK,EAAd,KAMMC,EAAcC,mBAEpBC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQX,IAChDO,GACFJ,EAASI,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAAQZ,EAAKQ,KAAKK,UAAUf,MACxC,CAACA,IAyBJ,OACE,eAAC,WAAD,WACE,cAACD,EAAD,CAAUC,MAAOA,EAAOR,WAzBT,SAACC,GAClB,IAAMuB,EAAQ,YAAOhB,GACfT,EAAOyB,EAASC,MAAK,SAAC1B,GAAD,OAAUA,EAAKE,KAAOA,KACjDF,EAAKI,WAAaJ,EAAKI,UACvBU,EAASW,MAsBP,uBAAOE,IAAKZ,EAAaV,KAAK,OAAOuB,YAAY,aACjD,wBAAQC,QApBU,WACpB,IAAM1B,EAAOY,EAAYe,QAAQC,MACpB,KAAT5B,IAEJW,GAAS,SAAAkB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAC9B,GAAI8B,EAAUC,OAAO,GAAKD,EAAUC,OAAO,GAAG,GAAG/B,GAAG,EAAI,EAAGC,OAAMC,WAAW,QAGrGW,EAAYe,QAAQC,MAAQ,OAY1B,oBACA,wBAAQF,QAVW,WACrB,IAAMJ,EAAWhB,EAAMyB,QAAO,SAAAlC,GAAI,OAAKA,EAAKI,aAC5CU,EAASW,IAQP,gCAEA,6CAAiBhB,EAAMyB,QAAO,SAAAlC,GAAI,OAAKA,EAAKI,aAAY+B,OAAxD,6BCxDN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.796892ed.chunk.js","sourcesContent":["import React from 'react';\n\nexport function TodoItems({ todo, toggleTodo }) {\n    const {id, task, completed} = todo;\n    const handleTodoClick = () => {\n        toggleTodo(id);\n    }\n\n    return (\n        <li>\n            <input type=\"checkbox\" checked={completed} onChange={handleTodoClick}/>\n            {task}\n        </li>\n    )\n}\n","import React from 'react';\nimport { TodoItems } from './TodoItems';\n\nexport function TodoList({ todos, toggleTodo }) {\n    return (\n        <ul>\n            {todos.map((todo) => (\n                <TodoItems key={todo.id} todo={todo} toggleTodo={toggleTodo}/>\n            ))}\n        </ul>\n    )\n}\n","import React, { Fragment, useEffect, useRef, useState } from 'react'\nimport './App.css';\nimport { TodoList } from './components/TodoList.jsx'\n\nconst KEY = 'todoApp.todos';\n\nexport function App() {\n  const [todos, setTodos] = useState([\n    {id: 1, task: 'Task 1', completed: false},\n    {id: 2, task: 'Task 2', completed: false},\n    {id: 3, task: 'Task 3', completed: false},\n  ]);\n\n  const todoTaskRef = useRef();\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(KEY));\n    if (storedTodos) {\n      setTodos(storedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(KEY, JSON.stringify(todos))\n  }, [todos]);\n\n  const toggleTodo = (id) => {\n    const newTodos = [...todos];\n    const todo = newTodos.find((todo) => todo.id === id);\n    todo.completed = !todo.completed;\n    setTodos(newTodos);\n  }\n\n  const handleTodoAdd = () => {\n    const task = todoTaskRef.current.value;\n    if (task === '') return;\n\n    setTodos(prevTodos => {\n      return [...prevTodos, {id: prevTodos.slice(-1) ? prevTodos.slice(-1)[0].id+1 : 0, task, completed: false}];\n    })\n\n    todoTaskRef.current.value = null;\n  }\n\n  const handleClearAll = () => {\n    const newTodos = todos.filter(todo => !todo.completed);\n    setTodos(newTodos);\n  }\n\n  return (\n    <Fragment>\n      <TodoList todos={todos} toggleTodo={toggleTodo}/>\n      <input ref={todoTaskRef} type=\"text\" placeholder=\"New task\" />\n      <button onClick={handleTodoAdd}>‚ûï</button>\n      <button onClick={handleClearAll}>üóëÔ∏è</button>\n\n      <div>Te quedan {(todos.filter(todo => !todo.completed)).length} tareas por terminar</div>\n    </Fragment>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}